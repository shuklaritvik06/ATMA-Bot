const Airtable = require("airtable");
const base = new Airtable({ apiKey: `${process.env.API_KEY}` }).base(
  `${process.env.BASE_ID}`
);
module.exports.welcome = async (ctx) => {
  await ctx.telegram.sendPhoto(
    ctx.chat.id,
    "https://www.ebi.com.tr/medya/2017/12/chat-bot-for-social-networking.jpg",
    {
      caption: `
      –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üëã –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ ATMA.
    `,
    }
  );
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    `
    –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É/–ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ä–∞–∑—É–º–Ω–æ–π —Ü–µ–Ω–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/add- –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É/–ø—Ä–æ–¥—É–∫—Ç\n\n/book- –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å a Service/Grocery\n\n/raise- –ü–æ–¥–Ω–∏–º–∏—Ç–µ –±–∏–ª–µ—Ç\n\n/feedback- –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤\n\n/help- –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å  `
  );
};

module.exports.addOwner = async (ctx) => {
  ctx.telegram.sendMessage(
    ctx.chat.id,
    `
    –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π! üí´ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É, –∑–∞–ø–æ–ª–Ω–∏–≤ —ç—Ç—É —Ñ–æ—Ä–º—É https://airtable.com/shr12nuZycf5fWt4k
    `
  );
};
module.exports.bookService = async (ctx) => {
  ctx.deleteMessage();
  ctx.telegram.sendMessage(ctx.chat.id,
    `
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    `
  );
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ",
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ê—Ä–µ–Ω–¥–∞ –ø—Ä–∏–±–æ—Ä–∞",
              callback_data: "Appliance",
            },
          ],
          [
            {
              text: "–ü—Ä–æ–¥—É–∫—Ç—ã",
              callback_data: "Grocery",
            },
          ],
          [
            {
              text: "–î—Ä—É–≥–æ–π",
              callback_data: "Other",
            },
          ],
        ],
      },
    }
  );
};

module.exports.rentService = async (ctx) => {
  const data = ctx.update.callback_query.data;
  await ctx.telegram.sendMessage(ctx.chat.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö....");
  let results = [];
  try {
    ctx.deleteMessage();
    base("Services")
      .select({
        view: "Services Data",
        filterByFormula: `AND({Category}= '${data}',NOT({Booked} = 'Booked'))`,
      })
      .eachPage((record) => {
        record.forEach((item) => {
          results.push(item.get("Product"));
        });
        if (results.length > 0) {
          results = [...new Set(results)];
          ctx.telegram.sendMessage(
            ctx.chat.id,
            `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`,
            {
              reply_markup: {
                inline_keyboard: [
                  ...results.map((item) => {
                    return [
                      {
                        text: `${item}`,
                        callback_data: `service-${item}`,
                      },
                    ];
                  }),
                  [
                    {
                      text: "< –ù–∞–∑–∞–¥",
                      callback_data: "start",
                    },
                  ],
                ],
              },
            }
          );
        } else {
          ctx.telegram.sendMessage(ctx.chat.id, `–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "< –ù–∞–∑–∞–¥",
                    callback_data: "start",
                  },
                ],
              ],
            },
          });
        }
      });
  } catch (err) {
    console.log(err);
  }
};
module.exports.doitNow = async (ctx) => {
  const data = ctx.update.callback_query.data.split("-")[1];
  await ctx.telegram.sendMessage(ctx.chat.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö....");
  let results = [];
  try {
    ctx.deleteMessage();
    base("Services")
      .select({
        view: "Services Data",
        filterByFormula: `AND(FIND('${data}', {Product}),NOT({Booked} = 'Booked'))`,
      })
      .eachPage((record) => {
        record.forEach((item) => {
          results.push([
            {
              text: `Owner: ${item.get("Owner First Name")} ${item.get(
                "Owner Last Name"
              )}\nPrice: ${item.get("Price")} RUB`,
              callback_data: `owner-${item.get("Owner First Name")}-${item.get(
                "Owner Last Name"
              )}`,
            },
          ]);
        });
        if (results.length > 0) {
          ctx.telegram.sendMessage(
            ctx.chat.id,
            `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`,
            {
              reply_markup: {
                inline_keyboard: [
                  ...results,
                  [
                    {
                      text: "< –ù–∞–∑–∞–¥",
                      callback_data: "Appliance",
                    },
                  ],
                ],
              },
            }
          );
        } else {
          ctx.telegram.sendMessage(ctx.chat.id, `–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "< –ù–∞–∑–∞–¥",
                    callback_data: "Appliance",
                  },
                ],
              ],
            },
          });
        }
      });
  } catch (err) {
    console.log(err);
  }
};
module.exports.ownerInfo = async (ctx) => {
  ctx.deleteMessage();
  const first = ctx.update.callback_query.data.split("-")[1];
  const last = ctx.update.callback_query.data.split("-")[2];
  try {
    base("Services")
      .select({
        view: "Services Data",
        filterByFormula: `AND({Owner First Name}='${first}',{Owner Last Name}='${last}')`,
      })
      .eachPage((records) => {
        records.forEach((item) => {
          ctx.telegram.sendPhoto(ctx.chat.id, item.get("Image")[0].url, {
            caption: `
          –ò–º—è: ${item.get("Owner First Name")} ${item.get(
              "Owner Last Name"
            )}\n–¶–µ–Ω–∞: ${item.get("Price") * 0.02 + item.get("Price")} RUB
          `,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–ù–∞–∑–∞–¥",
                    callback_data: `service-${item.get("Product")}`,
                  },
                  {
                    text: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data: `book-${item
                      .get("Owner First Name")}-${item.get("Owner Last Name")}`,
                  },
                ],
              ],
            },
          });
        });
      });
  } catch (err) {
    console.log(err);
  }
};
module.exports.giveFeedback = async (ctx) => {
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    `
    –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π —à–∞–≥ –∫ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ ATMA –∑–¥–µ—Å—å https://airtable.com/shrC7nSKkeNaA8kBT üí´
    `
  );
};
module.exports.raiseTicket = async (ctx) => {
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    `
    –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ üòû –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∑–¥–µ—Å—å https://airtable.com/shrSQufO7q3QwuSsD
    `
  );
};
module.exports.buyItem = async (ctx) => {
  const first = ctx.update.callback_query.data.split("-")[1];
  const last = ctx.update.callback_query.data.split("-")[2];
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    "–í–∞—à–µ –∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞"
  );
  base("Services")
    .select({
      view: "Services Data",
      filterByFormula: `AND({Owner First Name}='${first}',{Owner Last Name}='${last}')`,
    })
    .eachPage((records) => {
      records.forEach((record) => {
        base("Services").update(record.id, {
          Booked: "Booked",
          Customer: `${ctx.from.first_name} ${ctx.from.last_name}`,
          Total: record.get("Price") * 0.02 + record.get("Price")
        });
      });
    });
  ctx.telegram.sendMessage(
    ctx.chat.id,
    `–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ —Å—É–º–º—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –Ω–∞ –Ω–æ–º–µ—Ä +79685691184 üéâ`
  );
};
module.exports.helpFunc = async (ctx) => {
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º üòä –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
  );
  await ctx.telegram.sendMessage(
    ctx.chat.id,
    "/add- –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É/–ø—Ä–æ–¥—É–∫—Ç\n\n/book- –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å a Service/Grocery\n\n/raise- –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É\n\n/feedback- –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤"
  );
};
